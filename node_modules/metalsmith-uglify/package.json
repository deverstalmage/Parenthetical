{
  "name": "metalsmith-uglify",
  "version": "0.0.5",
  "description": "An uglify plugin for metalsmith",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ksmithut/metalsmith-uglify.git"
  },
  "keywords": [
    "metalsmith",
    "uglify",
    "uglifyjs",
    "minification"
  ],
  "author": {
    "name": "ksmithut"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ksmithut/metalsmith-uglify/issues"
  },
  "devDependencies": {
    "assert-dir-equal": "^1.0.1",
    "coveralls": "^2.10.0",
    "docco": "^0.6.3",
    "fs-extra": "^0.8.1",
    "gulp": "^3.6.0",
    "gulp-exec": "^1.0.4",
    "gulp-istanbul": "^0.1.1",
    "gulp-jshint": "^1.5.0",
    "gulp-mocha": "^0.4.1",
    "gulp-util": "^2.2.14",
    "istanbul": "^0.2.7",
    "jshint-stylish": "^0.1.5",
    "metalsmith": "^0.5.0",
    "mocha": "^1.18.2",
    "mocha-lcov-reporter": "0.0.1",
    "should": "^3.2.0"
  },
  "dependencies": {
    "async": "^0.6.2",
    "globule": "^0.2.0",
    "lodash": "^2.4.1",
    "uglify-js": "git://github.com/ksmithut/UglifyJS2"
  },
  "readme": "# metalsmith-uglify\n\n[![NPM version](http://img.shields.io/npm/v/metalsmith-uglify.svg)](https://www.npmjs.org/package/metalsmith-uglify)\n[![Dependency Status](http://img.shields.io/gemnasium/ksmithut/metalsmith-uglify.svg)](https://gemnasium.com/ksmithut/metalsmith-uglify)\n[![Code Climate](http://img.shields.io/codeclimate/github/ksmithut/metalsmith-uglify.svg)](https://codeclimate.com/github/ksmithut/metalsmith-uglify)\n[![Build Status](http://img.shields.io/travis/ksmithut/metalsmith-uglify.svg)](https://travis-ci.org/ksmithut/metalsmith-uglify)\n[![Coverage Status](http://img.shields.io/coveralls/ksmithut/metalsmith-uglify.svg)](https://coveralls.io/r/ksmithut/metalsmith-uglify)\n\nAn UglifyJS plugin for metalsmith\n\n## Installation\n\n```bash\n$ npm install metalsmith-uglify --save\n```\n\n## Usage\n\nBy default, it takes all of your javascript files, and produces a `.min.js`\nversion of it in the same directory.\n\n```javascript\nvar Metalsmith = require('metalsmith')\n  , uglify     = require('metalsmith-uglify')\n  ;\n\nMetalsmith(__dirname)\n  .use(uglify())\n  .build();\n\n```\n\nIt also takes in an object hash with options:\n\n### `options.concat` (Boolean, String) Default `false`\n\nWhether or not to concatenate all of the filtered .js files into one minified\nfile. Pass false or a falsy value to not concatenate, and a string (the filepath\nof the file you would like to create) if you want to concatenate. Do not put in\n`true`. There is no default name as a default name could conflict with any\nnumber of other generated files from other plugins.\n\n### `options.filter` (String, Function, Array of Strings) Default `'**/*.js'`\n\nThis is how you filter which files actually get included. You can use a glob\npattern like the default value, an array of glob patterns, or a function. The\nfunction takes in the filepath to the file. Return `true` if it should be\nuglified, `false` if it shouldn't be included.\n\n### `options.sourceMap` (Boolean) Default: `false`\n\n`true` if you want to include the source map, `false` if otherwise\n\n### `options.sourceMapName` (String, Function) Default: `undefined`\n\nThe name of the source map to generate. If you use a function, the function\ntakes the original name as the argument, then you must return what you want the\nnew name to be.\n\n```javascript\nMetalsmith(__dirname)\n  .use(uglify({\n    sourceMap: true,\n    sourceMapName: function (name) {\n      return name.replace('.js', '.min.js');\n    }\n  }))\n  .build();\n```\n\nIf you pass in a string, you must also have the `options.concat` option set. It\ndoesn't make sense to have all of your javascript files come across separately\nand then you have them all output to the same file without the `concat` option.\n\n### `options.sourceMapIn` (String) Default: `undefined`\n\nThe path to the generated source map (i.e. CoffeeScript). In the future, a\nfunction type will be supported here.\n\n### `options.includeSources` (Boolean) Default: `false`\n\nWhether or not to include the source content in the source maps\n\n### `options.preserveComments` (Boolean, String, Function) Default: `false`\n\nThe manner in which comments should be preserved.\n\nPass in `'all'` to keep all comments\n\nPass in `'some'` to keep comments that start with `!` `@preserve` `@license`\n`@cc_on`\n\nPass in a function to conditionally keep comments. Specify your own comment\npreservation function. You will be passed the current node and the current\ncomment and are expected to return either true or false.\n\n### Other options\n\nAdd in any other options that `uglify.minify` can take:\n[uglify api](https://github.com/mishoo/UglifyJS2)\n\n## Troubleshooting\n\nAlthough this is intended to just be a small wrapper around UglifyJS, there\ncould be some issues with relative filepaths due to the nature of metalsmith\nplugins. I have many automated tests running, but to be honest, I hadn't used\nmetalsmith too much before writing this plugin. I just saw a need that needed\nto be filled and filled it.\n\n## Caveats\n\nIf you look at the dependencies, you may notice that I'm using a fork of\nUglifyJS. The reason for this is uglifyjs does the file reading for you, but\nwith metalsmith, the files have already been read and the contents are passed\ninto the plugin. See this [pull request](https://github.com/mishoo/UglifyJS2/pull/324)\nfor more info.\n\nI plan on switching back to the main module for uglifyjs once the maintainer\nhas time to merge in those pull requests, but for now, we need metalsmith\ncompatiblity. Feel free to submit PRs to this repo. I'm not too stingy on naming\nof options. That's why it's in version 0.0.x because the API is subject to\nchange.\n\n## Development\n\nThis project uses [`gulp`](http://gulpjs.com/) for task automation.\n\n```bash\n$ npm install -g gulp\n```\n\nHere are the three tasks available to use:\n\n* `gulp hint`: runs all pertinent code against jshint. The rules are the ones\ndefined in [`.jshintrc`](.jshintrc)\n\n* `gulp test`: runs all tests with\n[`mocha`](http://visionmedia.github.io/mocha/) for passing and\n[`instanbul`](http://gotwarlost.github.io/istanbul/) for code coverage. It\ngenerates html files showing the code coverage.\n\n* `gulp docs`: builds out all of the documentation using\n[`docco`](http://jashkenas.github.io/docco/). Note that you need to have docco\ninstalled (`npm install -g docco`). I at one time at docco part of the dev\ndependencies, but now I don't. I may be open to putting it back, but I just\nwanted to keep the package as small as possible.\n\nYou can also run `npm test`, and it does basically does the same thing as\n`gulp test`, but an error will be thrown because it does some more istanbul\nstuff to send data to the coverage server. When this project runs through\ntravis, it also sends coverage data to coveralls.io.\n\nWhen forking and doing pull requests, work off of the `develop` branch. I won't\nbe super strict on this, but it's what I would prefer. That way we can keep\n`master` clean.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/ksmithut/metalsmith-uglify",
  "_id": "metalsmith-uglify@0.0.5",
  "dist": {
    "shasum": "c7404a6626cf87f31463655267fdd49c6fe86273"
  },
  "_from": "metalsmith-uglify@",
  "_resolved": "https://registry.npmjs.org/metalsmith-uglify/-/metalsmith-uglify-0.0.5.tgz"
}
